/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * City generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`CITY`", schema = "PUBLIC")
public class City implements Serializable {

    private Integer cityId;
    private String city;
    private int countryId;
    private Country country;
    private List<Address> addresses = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`CITY_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getCityId() {
        return this.cityId;
    }

    public void setCityId(Integer cityId) {
        this.cityId = cityId;
    }

    @Column(name = "`CITY`", nullable = false, length = 50)
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "`COUNTRY_ID`", nullable = false, scale = 0, precision = 10)
    public int getCountryId() {
        return this.countryId;
    }

    public void setCountryId(int countryId) {
        this.countryId = countryId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COUNTRY_ID`", referencedColumnName = "`COUNTRY_ID`", insertable = false, updatable = false)
    public Country getCountry() {
        return this.country;
    }

    public void setCountry(Country country) {
        if(country != null) {
            this.countryId = country.getCountryId();
        }

        this.country = country;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "city")
    public List<Address> getAddresses() {
        return this.addresses;
    }

    public void setAddresses(List<Address> addresses) {
        this.addresses = addresses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof City)) return false;
        final City cityInstance = (City) o;
        return Objects.equals(getCityId(), cityInstance.getCityId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCityId());
    }
}


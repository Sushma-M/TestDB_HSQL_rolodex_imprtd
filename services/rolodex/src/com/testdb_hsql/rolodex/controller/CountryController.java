/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testdb_hsql.rolodex.City;
import com.testdb_hsql.rolodex.Country;
import com.testdb_hsql.rolodex.service.CountryService;

/**
 * Controller object for domain model class Country.
 * @see Country
 */
@RestController("rolodex.CountryController")
@Api(value = "CountryController", description = "Exposes APIs to work with Country resource.")
@RequestMapping("/rolodex/Country")
public class CountryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountryController.class);

    @Autowired
    @Qualifier("rolodex.CountryService")
    private CountryService countryService;

    @ApiOperation(value = "Creates a new Country instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Country createCountry(@RequestBody Country countryInstance) {
        LOGGER.debug("Create Country with information: {}", countryInstance);
        countryInstance = countryService.create(countryInstance);
        LOGGER.debug("Created Country with information: {}", countryInstance);
        return countryInstance;
    }

    @ApiOperation(value = "Returns the Country instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Country getCountry(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Country with id: {}", id);
        Country foundCountry = countryService.getById(id);
        LOGGER.debug("Country details with id: {}", foundCountry);
        return foundCountry;
    }

    @ApiOperation(value = "Updates the Country instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Country editCountry(@PathVariable("id") Integer id, @RequestBody Country countryInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing Country with id: {}", countryInstance.getCountryId());
        countryInstance.setCountryId(id);
        countryInstance = countryService.update(countryInstance);
        LOGGER.debug("Country details with id: {}", countryInstance);
        return countryInstance;
    }

    @ApiOperation(value = "Deletes the Country instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCountry(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Country with id: {}", id);
        Country deletedCountry = countryService.delete(id);
        return deletedCountry != null;
    }

    /**
     * @deprecated Use {@link #findCountries(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Country instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Country> findCountries(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Countries list");
        return countryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Country instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Country> findCountries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Countries list");
        return countryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountries(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return countryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Country instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countCountries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Countries");
        return countryService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/cities", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the cities instance associated with the given id.")
    public Page<City> findAssociatedCities(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated cities");
        return countryService.findAssociatedCities(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CountryService instance
	 */
    protected void setCountryService(CountryService service) {
        this.countryService = service;
    }
}

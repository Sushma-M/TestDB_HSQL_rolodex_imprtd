/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testdb_hsql.rolodex.Customer;
import com.testdb_hsql.rolodex.Inventory;
import com.testdb_hsql.rolodex.Store;
import com.testdb_hsql.rolodex.service.StoreService;

/**
 * Controller object for domain model class Store.
 * @see Store
 */
@RestController("rolodex.StoreController")
@Api(value = "StoreController", description = "Exposes APIs to work with Store resource.")
@RequestMapping("/rolodex/Store")
public class StoreController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StoreController.class);

    @Autowired
    @Qualifier("rolodex.StoreService")
    private StoreService storeService;

    @ApiOperation(value = "Creates a new Store instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Store createStore(@RequestBody Store store) {
        LOGGER.debug("Create Store with information: {}", store);
        store = storeService.create(store);
        LOGGER.debug("Created Store with information: {}", store);
        return store;
    }

    @ApiOperation(value = "Returns the Store instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Store getStore(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Store with id: {}", id);
        Store foundStore = storeService.getById(id);
        LOGGER.debug("Store details with id: {}", foundStore);
        return foundStore;
    }

    @ApiOperation(value = "Updates the Store instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Store editStore(@PathVariable("id") Integer id, @RequestBody Store store) throws EntityNotFoundException {
        LOGGER.debug("Editing Store with id: {}", store.getStoreId());
        store.setStoreId(id);
        store = storeService.update(store);
        LOGGER.debug("Store details with id: {}", store);
        return store;
    }

    @ApiOperation(value = "Deletes the Store instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStore(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Store with id: {}", id);
        Store deletedStore = storeService.delete(id);
        return deletedStore != null;
    }

    /**
     * @deprecated Use {@link #findStores(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Store instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Store> findStores(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Stores list");
        return storeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Store instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Store> findStores(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Stores list");
        return storeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStores(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return storeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Store instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countStores(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Stores");
        return storeService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/customers", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the customers instance associated with the given id.")
    public Page<Customer> findAssociatedCustomers(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated customers");
        return storeService.findAssociatedCustomers(id, pageable);
    }

    @RequestMapping(value = "/{id:.+}/inventories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inventories instance associated with the given id.")
    public Page<Inventory> findAssociatedInventories(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inventories");
        return storeService.findAssociatedInventories(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StoreService instance
	 */
    protected void setStoreService(StoreService service) {
        this.storeService = service;
    }
}

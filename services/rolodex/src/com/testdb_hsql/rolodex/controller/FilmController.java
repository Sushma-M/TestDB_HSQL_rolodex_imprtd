/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testdb_hsql.rolodex.Film;
import com.testdb_hsql.rolodex.FilmActor;
import com.testdb_hsql.rolodex.Inventory;
import com.testdb_hsql.rolodex.service.FilmService;

/**
 * Controller object for domain model class Film.
 * @see Film
 */
@RestController("rolodex.FilmController")
@Api(value = "FilmController", description = "Exposes APIs to work with Film resource.")
@RequestMapping("/rolodex/Film")
public class FilmController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmController.class);

    @Autowired
    @Qualifier("rolodex.FilmService")
    private FilmService filmService;

    @ApiOperation(value = "Creates a new Film instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Film createFilm(@RequestBody Film film) {
        LOGGER.debug("Create Film with information: {}", film);
        film = filmService.create(film);
        LOGGER.debug("Created Film with information: {}", film);
        return film;
    }

    @ApiOperation(value = "Returns the Film instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Film getFilm(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Film with id: {}", id);
        Film foundFilm = filmService.getById(id);
        LOGGER.debug("Film details with id: {}", foundFilm);
        return foundFilm;
    }

    @ApiOperation(value = "Updates the Film instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Film editFilm(@PathVariable("id") Integer id, @RequestBody Film film) throws EntityNotFoundException {
        LOGGER.debug("Editing Film with id: {}", film.getFilmId());
        film.setFilmId(id);
        film = filmService.update(film);
        LOGGER.debug("Film details with id: {}", film);
        return film;
    }

    @ApiOperation(value = "Deletes the Film instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFilm(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Film with id: {}", id);
        Film deletedFilm = filmService.delete(id);
        return deletedFilm != null;
    }

    /**
     * @deprecated Use {@link #findFilms(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Film instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Film> findFilms(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Films list");
        return filmService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Film instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Film> findFilms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Films list");
        return filmService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFilms(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return filmService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Film instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countFilms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Films");
        return filmService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/inventories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inventories instance associated with the given id.")
    public Page<Inventory> findAssociatedInventories(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inventories");
        return filmService.findAssociatedInventories(id, pageable);
    }

    @RequestMapping(value = "/{id:.+}/filmActors", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the filmActors instance associated with the given id.")
    public Page<FilmActor> findAssociatedFilmActors(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated filmActors");
        return filmService.findAssociatedFilmActors(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FilmService instance
	 */
    protected void setFilmService(FilmService service) {
        this.filmService = service;
    }
}

/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testdb_hsql.rolodex.Customer;
import com.testdb_hsql.rolodex.service.CustomerService;

/**
 * Controller object for domain model class Customer.
 * @see Customer
 */
@RestController("rolodex.CustomerController")
@Api(value = "CustomerController", description = "Exposes APIs to work with Customer resource.")
@RequestMapping("/rolodex/Customer")
public class CustomerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerController.class);

    @Autowired
    @Qualifier("rolodex.CustomerService")
    private CustomerService customerService;

    @ApiOperation(value = "Creates a new Customer instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Customer createCustomer(@RequestBody Customer customer) {
        LOGGER.debug("Create Customer with information: {}", customer);
        customer = customerService.create(customer);
        LOGGER.debug("Created Customer with information: {}", customer);
        return customer;
    }

    @ApiOperation(value = "Returns the Customer instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Customer getCustomer(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Customer with id: {}", id);
        Customer foundCustomer = customerService.getById(id);
        LOGGER.debug("Customer details with id: {}", foundCustomer);
        return foundCustomer;
    }

    @ApiOperation(value = "Updates the Customer instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Customer editCustomer(@PathVariable("id") Integer id, @RequestBody Customer customer) throws EntityNotFoundException {
        LOGGER.debug("Editing Customer with id: {}", customer.getCustomerId());
        customer.setCustomerId(id);
        customer = customerService.update(customer);
        LOGGER.debug("Customer details with id: {}", customer);
        return customer;
    }

    @ApiOperation(value = "Deletes the Customer instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCustomer(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Customer with id: {}", id);
        Customer deletedCustomer = customerService.delete(id);
        return deletedCustomer != null;
    }

    /**
     * @deprecated Use {@link #findCustomers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Customer instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Customer> findCustomers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Customers list");
        return customerService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Customer instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Customer> findCustomers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Customers list");
        return customerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCustomers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return customerService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Customer instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countCustomers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Customers");
        return customerService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CustomerService instance
	 */
    protected void setCustomerService(CustomerService service) {
        this.customerService = service;
    }
}

/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.Customer;
import com.testdb_hsql.rolodex.Inventory;
import com.testdb_hsql.rolodex.Store;


/**
 * ServiceImpl object for domain model class Store.
 *
 * @see Store
 */
@Service("rolodex.StoreService")
public class StoreServiceImpl implements StoreService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StoreServiceImpl.class);

    @Autowired
	@Qualifier("rolodex.InventoryService")
	private InventoryService inventoryService;

    @Autowired
	@Qualifier("rolodex.CustomerService")
	private CustomerService customerService;

    @Autowired
    @Qualifier("rolodex.StoreDao")
    private WMGenericDao<Store, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Store, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rolodexTransactionManager")
    @Override
	public Store create(Store store) {
        LOGGER.debug("Creating a new Store with information: {}", store);
        Store storeCreated = this.wmGenericDao.create(store);
        if(storeCreated.getCustomers() != null) {
            for(Customer customer : storeCreated.getCustomers()) {
                customer.setStore(storeCreated);
                LOGGER.debug("Creating a new child Customer with information: {}", customer);
                customerService.create(customer);
            }
        }

        if(storeCreated.getInventories() != null) {
            for(Inventory inventorie : storeCreated.getInventories()) {
                inventorie.setStore(storeCreated);
                LOGGER.debug("Creating a new child Inventory with information: {}", inventorie);
                inventoryService.create(inventorie);
            }
        }
        return storeCreated;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Store getById(Integer storeIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Finding Store by id: {}", storeIdInstance);
        Store store = this.wmGenericDao.findById(storeIdInstance);
        if (store == null){
            LOGGER.debug("No Store found with id: {}", storeIdInstance);
            throw new EntityNotFoundException(String.valueOf(storeIdInstance));
        }
        return store;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Store findById(Integer storeIdInstance) {
        LOGGER.debug("Finding Store by id: {}", storeIdInstance);
        return this.wmGenericDao.findById(storeIdInstance);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
	@Override
	public Store update(Store store) throws EntityNotFoundException {
        LOGGER.debug("Updating Store with information: {}", store);
        this.wmGenericDao.update(store);

        Integer storeIdInstance = store.getStoreId();

        return this.wmGenericDao.findById(storeIdInstance);
    }

    @Transactional(value = "rolodexTransactionManager")
	@Override
	public Store delete(Integer storeIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Deleting Store with id: {}", storeIdInstance);
        Store deleted = this.wmGenericDao.findById(storeIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Store found with id: {}", storeIdInstance);
            throw new EntityNotFoundException(String.valueOf(storeIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Page<Store> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Stores");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Store> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Stores");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rolodex for table Store to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Customer> findAssociatedCustomers(Integer storeId, Pageable pageable) {
        LOGGER.debug("Fetching all associated customers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("store.storeId = '" + storeId + "'");

        return customerService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Inventory> findAssociatedInventories(Integer storeId, Pageable pageable) {
        LOGGER.debug("Fetching all associated inventories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("store.storeId = '" + storeId + "'");

        return inventoryService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InventoryService instance
	 */
	protected void setInventoryService(InventoryService service) {
        this.inventoryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CustomerService instance
	 */
	protected void setCustomerService(CustomerService service) {
        this.customerService = service;
    }

}


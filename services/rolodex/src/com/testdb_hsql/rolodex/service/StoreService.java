/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.Customer;
import com.testdb_hsql.rolodex.Inventory;
import com.testdb_hsql.rolodex.Store;

/**
 * Service object for domain model class {@link Store}.
 */
public interface StoreService {

    /**
     * Creates a new Store. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Store if any.
     *
     * @param store Details of the Store to be created; value cannot be null.
     * @return The newly created Store.
     */
	Store create(Store store);


	/**
	 * Returns Store by given id if exists.
	 *
	 * @param storeIdInstance The id of the Store to get; value cannot be null.
	 * @return Store associated with the given storeIdInstance.
     * @throws EntityNotFoundException If no Store is found.
	 */
	Store getById(Integer storeIdInstance) throws EntityNotFoundException;

    /**
	 * Find and return the Store by given id if exists, returns null otherwise.
	 *
	 * @param storeIdInstance The id of the Store to get; value cannot be null.
	 * @return Store associated with the given storeIdInstance.
	 */
	Store findById(Integer storeIdInstance);


	/**
	 * Updates the details of an existing Store. It replaces all fields of the existing Store with the given store.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Store if any.
     *
	 * @param store The details of the Store to be updated; value cannot be null.
	 * @return The updated Store.
	 * @throws EntityNotFoundException if no Store is found with given input.
	 */
	Store update(Store store) throws EntityNotFoundException;

    /**
	 * Deletes an existing Store with the given id.
	 *
	 * @param storeIdInstance The id of the Store to be deleted; value cannot be null.
	 * @return The deleted Store.
	 * @throws EntityNotFoundException if no Store found with the given id.
	 */
	Store delete(Integer storeIdInstance) throws EntityNotFoundException;

	/**
	 * Find all Stores matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Stores.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Store> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Stores matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Stores.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Store> findAll(String query, Pageable pageable);

    /**
	 * Exports all Stores matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Stores in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Store.
	 */
	long count(String query);

    /*
     * Returns the associated customers for given Store id.
     *
     * @param storeId value of storeId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Customer instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Customer> findAssociatedCustomers(Integer storeId, Pageable pageable);

    /*
     * Returns the associated inventories for given Store id.
     *
     * @param storeId value of storeId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Inventory instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Inventory> findAssociatedInventories(Integer storeId, Pageable pageable);

}


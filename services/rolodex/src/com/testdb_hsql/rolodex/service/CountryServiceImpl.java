/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.City;
import com.testdb_hsql.rolodex.Country;


/**
 * ServiceImpl object for domain model class Country.
 *
 * @see Country
 */
@Service("rolodex.CountryService")
public class CountryServiceImpl implements CountryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountryServiceImpl.class);

    @Autowired
	@Qualifier("rolodex.CityService")
	private CityService cityService;

    @Autowired
    @Qualifier("rolodex.CountryDao")
    private WMGenericDao<Country, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Country, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rolodexTransactionManager")
    @Override
	public Country create(Country countryInstance) {
        LOGGER.debug("Creating a new Country with information: {}", countryInstance);
        Country countryInstanceCreated = this.wmGenericDao.create(countryInstance);
        if(countryInstanceCreated.getCities() != null) {
            for(City citie : countryInstanceCreated.getCities()) {
                citie.setCountry(countryInstanceCreated);
                LOGGER.debug("Creating a new child City with information: {}", citie);
                cityService.create(citie);
            }
        }
        return countryInstanceCreated;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Country getById(Integer countryIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Finding Country by id: {}", countryIdInstance);
        Country countryInstance = this.wmGenericDao.findById(countryIdInstance);
        if (countryInstance == null){
            LOGGER.debug("No Country found with id: {}", countryIdInstance);
            throw new EntityNotFoundException(String.valueOf(countryIdInstance));
        }
        return countryInstance;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Country findById(Integer countryIdInstance) {
        LOGGER.debug("Finding Country by id: {}", countryIdInstance);
        return this.wmGenericDao.findById(countryIdInstance);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
	@Override
	public Country update(Country countryInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating Country with information: {}", countryInstance);
        this.wmGenericDao.update(countryInstance);

        Integer countryIdInstance = countryInstance.getCountryId();

        return this.wmGenericDao.findById(countryIdInstance);
    }

    @Transactional(value = "rolodexTransactionManager")
	@Override
	public Country delete(Integer countryIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Deleting Country with id: {}", countryIdInstance);
        Country deleted = this.wmGenericDao.findById(countryIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Country found with id: {}", countryIdInstance);
            throw new EntityNotFoundException(String.valueOf(countryIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Page<Country> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Country> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rolodex for table Country to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<City> findAssociatedCities(Integer countryId, Pageable pageable) {
        LOGGER.debug("Fetching all associated cities");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("country.countryId = '" + countryId + "'");

        return cityService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CityService instance
	 */
	protected void setCityService(CityService service) {
        this.cityService = service;
    }

}


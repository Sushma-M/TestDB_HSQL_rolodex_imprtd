/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.Address;
import com.testdb_hsql.rolodex.City;


/**
 * ServiceImpl object for domain model class City.
 *
 * @see City
 */
@Service("rolodex.CityService")
public class CityServiceImpl implements CityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CityServiceImpl.class);

    @Autowired
	@Qualifier("rolodex.AddressService")
	private AddressService addressService;

    @Autowired
    @Qualifier("rolodex.CityDao")
    private WMGenericDao<City, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<City, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rolodexTransactionManager")
    @Override
	public City create(City cityInstance) {
        LOGGER.debug("Creating a new City with information: {}", cityInstance);
        City cityInstanceCreated = this.wmGenericDao.create(cityInstance);
        if(cityInstanceCreated.getAddresses() != null) {
            for(Address addresse : cityInstanceCreated.getAddresses()) {
                addresse.setCity(cityInstanceCreated);
                LOGGER.debug("Creating a new child Address with information: {}", addresse);
                addressService.create(addresse);
            }
        }
        return cityInstanceCreated;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public City getById(Integer cityIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Finding City by id: {}", cityIdInstance);
        City cityInstance = this.wmGenericDao.findById(cityIdInstance);
        if (cityInstance == null){
            LOGGER.debug("No City found with id: {}", cityIdInstance);
            throw new EntityNotFoundException(String.valueOf(cityIdInstance));
        }
        return cityInstance;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public City findById(Integer cityIdInstance) {
        LOGGER.debug("Finding City by id: {}", cityIdInstance);
        return this.wmGenericDao.findById(cityIdInstance);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
	@Override
	public City update(City cityInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating City with information: {}", cityInstance);
        this.wmGenericDao.update(cityInstance);

        Integer cityIdInstance = cityInstance.getCityId();

        return this.wmGenericDao.findById(cityIdInstance);
    }

    @Transactional(value = "rolodexTransactionManager")
	@Override
	public City delete(Integer cityIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Deleting City with id: {}", cityIdInstance);
        City deleted = this.wmGenericDao.findById(cityIdInstance);
        if (deleted == null) {
            LOGGER.debug("No City found with id: {}", cityIdInstance);
            throw new EntityNotFoundException(String.valueOf(cityIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Page<City> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Cities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<City> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Cities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rolodex for table City to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Address> findAssociatedAddresses(Integer cityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated addresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("city.cityId = '" + cityId + "'");

        return addressService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AddressService instance
	 */
	protected void setAddressService(AddressService service) {
        this.addressService = service;
    }

}


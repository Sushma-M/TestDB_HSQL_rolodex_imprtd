/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.Customer;

/**
 * Service object for domain model class {@link Customer}.
 */
public interface CustomerService {

    /**
     * Creates a new Customer. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Customer if any.
     *
     * @param customer Details of the Customer to be created; value cannot be null.
     * @return The newly created Customer.
     */
	Customer create(Customer customer);


	/**
	 * Returns Customer by given id if exists.
	 *
	 * @param customerIdInstance The id of the Customer to get; value cannot be null.
	 * @return Customer associated with the given customerIdInstance.
     * @throws EntityNotFoundException If no Customer is found.
	 */
	Customer getById(Integer customerIdInstance) throws EntityNotFoundException;

    /**
	 * Find and return the Customer by given id if exists, returns null otherwise.
	 *
	 * @param customerIdInstance The id of the Customer to get; value cannot be null.
	 * @return Customer associated with the given customerIdInstance.
	 */
	Customer findById(Integer customerIdInstance);


	/**
	 * Updates the details of an existing Customer. It replaces all fields of the existing Customer with the given customer.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Customer if any.
     *
	 * @param customer The details of the Customer to be updated; value cannot be null.
	 * @return The updated Customer.
	 * @throws EntityNotFoundException if no Customer is found with given input.
	 */
	Customer update(Customer customer) throws EntityNotFoundException;

    /**
	 * Deletes an existing Customer with the given id.
	 *
	 * @param customerIdInstance The id of the Customer to be deleted; value cannot be null.
	 * @return The deleted Customer.
	 * @throws EntityNotFoundException if no Customer found with the given id.
	 */
	Customer delete(Integer customerIdInstance) throws EntityNotFoundException;

	/**
	 * Find all Customers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Customers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Customers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Customers.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Customer> findAll(String query, Pageable pageable);

    /**
	 * Exports all Customers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Customers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Customer.
	 */
	long count(String query);


}


/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.FilmActor;
import com.testdb_hsql.rolodex.FilmActorId;


/**
 * ServiceImpl object for domain model class FilmActor.
 *
 * @see FilmActor
 */
@Service("rolodex.FilmActorService")
public class FilmActorServiceImpl implements FilmActorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmActorServiceImpl.class);


    @Autowired
    @Qualifier("rolodex.FilmActorDao")
    private WMGenericDao<FilmActor, FilmActorId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FilmActor, FilmActorId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rolodexTransactionManager")
    @Override
	public FilmActor create(FilmActor filmActor) {
        LOGGER.debug("Creating a new FilmActor with information: {}", filmActor);
        FilmActor filmActorCreated = this.wmGenericDao.create(filmActor);
        return filmActorCreated;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public FilmActor getById(FilmActorId filmactorId) throws EntityNotFoundException {
        LOGGER.debug("Finding FilmActor by id: {}", filmactorId);
        FilmActor filmActor = this.wmGenericDao.findById(filmactorId);
        if (filmActor == null){
            LOGGER.debug("No FilmActor found with id: {}", filmactorId);
            throw new EntityNotFoundException(String.valueOf(filmactorId));
        }
        return filmActor;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public FilmActor findById(FilmActorId filmactorId) {
        LOGGER.debug("Finding FilmActor by id: {}", filmactorId);
        return this.wmGenericDao.findById(filmactorId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
	@Override
	public FilmActor update(FilmActor filmActor) throws EntityNotFoundException {
        LOGGER.debug("Updating FilmActor with information: {}", filmActor);
        this.wmGenericDao.update(filmActor);

        FilmActorId filmactorId = new FilmActorId();
        filmactorId.setActorId(filmActor.getActorId());
        filmactorId.setFilmId(filmActor.getFilmId());

        return this.wmGenericDao.findById(filmactorId);
    }

    @Transactional(value = "rolodexTransactionManager")
	@Override
	public FilmActor delete(FilmActorId filmactorId) throws EntityNotFoundException {
        LOGGER.debug("Deleting FilmActor with id: {}", filmactorId);
        FilmActor deleted = this.wmGenericDao.findById(filmactorId);
        if (deleted == null) {
            LOGGER.debug("No FilmActor found with id: {}", filmactorId);
            throw new EntityNotFoundException(String.valueOf(filmactorId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Page<FilmActor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FilmActors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<FilmActor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FilmActors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rolodex for table FilmActor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.Actor;
import com.testdb_hsql.rolodex.FilmActor;


/**
 * ServiceImpl object for domain model class Actor.
 *
 * @see Actor
 */
@Service("rolodex.ActorService")
public class ActorServiceImpl implements ActorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActorServiceImpl.class);

    @Autowired
	@Qualifier("rolodex.FilmActorService")
	private FilmActorService filmActorService;

    @Autowired
    @Qualifier("rolodex.ActorDao")
    private WMGenericDao<Actor, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Actor, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rolodexTransactionManager")
    @Override
	public Actor create(Actor actor) {
        LOGGER.debug("Creating a new Actor with information: {}", actor);
        Actor actorCreated = this.wmGenericDao.create(actor);
        if(actorCreated.getFilmActors() != null) {
            for(FilmActor filmActor : actorCreated.getFilmActors()) {
                filmActor.setActor(actorCreated);
                LOGGER.debug("Creating a new child FilmActor with information: {}", filmActor);
                filmActorService.create(filmActor);
            }
        }
        return actorCreated;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Actor getById(Integer actorIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Finding Actor by id: {}", actorIdInstance);
        Actor actor = this.wmGenericDao.findById(actorIdInstance);
        if (actor == null){
            LOGGER.debug("No Actor found with id: {}", actorIdInstance);
            throw new EntityNotFoundException(String.valueOf(actorIdInstance));
        }
        return actor;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Actor findById(Integer actorIdInstance) {
        LOGGER.debug("Finding Actor by id: {}", actorIdInstance);
        return this.wmGenericDao.findById(actorIdInstance);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
	@Override
	public Actor update(Actor actor) throws EntityNotFoundException {
        LOGGER.debug("Updating Actor with information: {}", actor);
        this.wmGenericDao.update(actor);

        Integer actorIdInstance = actor.getActorId();

        return this.wmGenericDao.findById(actorIdInstance);
    }

    @Transactional(value = "rolodexTransactionManager")
	@Override
	public Actor delete(Integer actorIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Deleting Actor with id: {}", actorIdInstance);
        Actor deleted = this.wmGenericDao.findById(actorIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Actor found with id: {}", actorIdInstance);
            throw new EntityNotFoundException(String.valueOf(actorIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Page<Actor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Actors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Actor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Actors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rolodex for table Actor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<FilmActor> findAssociatedFilmActors(Integer actorId, Pageable pageable) {
        LOGGER.debug("Fetching all associated filmActors");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("actor.actorId = '" + actorId + "'");

        return filmActorService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FilmActorService instance
	 */
	protected void setFilmActorService(FilmActorService service) {
        this.filmActorService = service;
    }

}


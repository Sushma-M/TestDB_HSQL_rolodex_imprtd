/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.Film;
import com.testdb_hsql.rolodex.FilmActor;
import com.testdb_hsql.rolodex.Inventory;


/**
 * ServiceImpl object for domain model class Film.
 *
 * @see Film
 */
@Service("rolodex.FilmService")
public class FilmServiceImpl implements FilmService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmServiceImpl.class);

    @Autowired
	@Qualifier("rolodex.InventoryService")
	private InventoryService inventoryService;

    @Autowired
	@Qualifier("rolodex.FilmActorService")
	private FilmActorService filmActorService;

    @Autowired
    @Qualifier("rolodex.FilmDao")
    private WMGenericDao<Film, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Film, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rolodexTransactionManager")
    @Override
	public Film create(Film film) {
        LOGGER.debug("Creating a new Film with information: {}", film);
        Film filmCreated = this.wmGenericDao.create(film);
        if(filmCreated.getInventories() != null) {
            for(Inventory inventorie : filmCreated.getInventories()) {
                inventorie.setFilm(filmCreated);
                LOGGER.debug("Creating a new child Inventory with information: {}", inventorie);
                inventoryService.create(inventorie);
            }
        }

        if(filmCreated.getFilmActors() != null) {
            for(FilmActor filmActor : filmCreated.getFilmActors()) {
                filmActor.setFilm(filmCreated);
                LOGGER.debug("Creating a new child FilmActor with information: {}", filmActor);
                filmActorService.create(filmActor);
            }
        }
        return filmCreated;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Film getById(Integer filmIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Finding Film by id: {}", filmIdInstance);
        Film film = this.wmGenericDao.findById(filmIdInstance);
        if (film == null){
            LOGGER.debug("No Film found with id: {}", filmIdInstance);
            throw new EntityNotFoundException(String.valueOf(filmIdInstance));
        }
        return film;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Film findById(Integer filmIdInstance) {
        LOGGER.debug("Finding Film by id: {}", filmIdInstance);
        return this.wmGenericDao.findById(filmIdInstance);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
	@Override
	public Film update(Film film) throws EntityNotFoundException {
        LOGGER.debug("Updating Film with information: {}", film);
        this.wmGenericDao.update(film);

        Integer filmIdInstance = film.getFilmId();

        return this.wmGenericDao.findById(filmIdInstance);
    }

    @Transactional(value = "rolodexTransactionManager")
	@Override
	public Film delete(Integer filmIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Deleting Film with id: {}", filmIdInstance);
        Film deleted = this.wmGenericDao.findById(filmIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Film found with id: {}", filmIdInstance);
            throw new EntityNotFoundException(String.valueOf(filmIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Page<Film> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Films");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Film> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Films");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rolodex for table Film to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Inventory> findAssociatedInventories(Integer filmId, Pageable pageable) {
        LOGGER.debug("Fetching all associated inventories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("film.filmId = '" + filmId + "'");

        return inventoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<FilmActor> findAssociatedFilmActors(Integer filmId, Pageable pageable) {
        LOGGER.debug("Fetching all associated filmActors");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("film.filmId = '" + filmId + "'");

        return filmActorService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InventoryService instance
	 */
	protected void setInventoryService(InventoryService service) {
        this.inventoryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FilmActorService instance
	 */
	protected void setFilmActorService(FilmActorService service) {
        this.filmActorService = service;
    }

}


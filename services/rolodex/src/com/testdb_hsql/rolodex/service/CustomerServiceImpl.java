/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testdb_hsql.rolodex.Customer;


/**
 * ServiceImpl object for domain model class Customer.
 *
 * @see Customer
 */
@Service("rolodex.CustomerService")
public class CustomerServiceImpl implements CustomerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerServiceImpl.class);


    @Autowired
    @Qualifier("rolodex.CustomerDao")
    private WMGenericDao<Customer, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Customer, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rolodexTransactionManager")
    @Override
	public Customer create(Customer customer) {
        LOGGER.debug("Creating a new Customer with information: {}", customer);
        Customer customerCreated = this.wmGenericDao.create(customer);
        return customerCreated;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Customer getById(Integer customerIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Finding Customer by id: {}", customerIdInstance);
        Customer customer = this.wmGenericDao.findById(customerIdInstance);
        if (customer == null){
            LOGGER.debug("No Customer found with id: {}", customerIdInstance);
            throw new EntityNotFoundException(String.valueOf(customerIdInstance));
        }
        return customer;
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Customer findById(Integer customerIdInstance) {
        LOGGER.debug("Finding Customer by id: {}", customerIdInstance);
        return this.wmGenericDao.findById(customerIdInstance);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rolodexTransactionManager")
	@Override
	public Customer update(Customer customer) throws EntityNotFoundException {
        LOGGER.debug("Updating Customer with information: {}", customer);
        this.wmGenericDao.update(customer);

        Integer customerIdInstance = customer.getCustomerId();

        return this.wmGenericDao.findById(customerIdInstance);
    }

    @Transactional(value = "rolodexTransactionManager")
	@Override
	public Customer delete(Integer customerIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Deleting Customer with id: {}", customerIdInstance);
        Customer deleted = this.wmGenericDao.findById(customerIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Customer found with id: {}", customerIdInstance);
            throw new EntityNotFoundException(String.valueOf(customerIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Page<Customer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rolodexTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rolodex for table Customer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rolodexTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


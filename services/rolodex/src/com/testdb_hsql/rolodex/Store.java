/*Generated by WaveMaker Studio*/
package com.testdb_hsql.rolodex;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Store generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`STORE`", schema = "PUBLIC")
public class Store implements Serializable {

    private Integer storeId;
    private int addressId;
    private List<Customer> customers = new ArrayList<>();
    private List<Inventory> inventories = new ArrayList<>();
    private Address address;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`STORE_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getStoreId() {
        return this.storeId;
    }

    public void setStoreId(Integer storeId) {
        this.storeId = storeId;
    }

    @Column(name = "`ADDRESS_ID`", nullable = false, scale = 0, precision = 10)
    public int getAddressId() {
        return this.addressId;
    }

    public void setAddressId(int addressId) {
        this.addressId = addressId;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "store")
    public List<Customer> getCustomers() {
        return this.customers;
    }

    public void setCustomers(List<Customer> customers) {
        this.customers = customers;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "store")
    public List<Inventory> getInventories() {
        return this.inventories;
    }

    public void setInventories(List<Inventory> inventories) {
        this.inventories = inventories;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ADDRESS_ID`", referencedColumnName = "`ADDRESS_ID`", insertable = false, updatable = false)
    public Address getAddress() {
        return this.address;
    }

    public void setAddress(Address address) {
        if(address != null) {
            this.addressId = address.getAddressId();
        }

        this.address = address;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Store)) return false;
        final Store store = (Store) o;
        return Objects.equals(getStoreId(), store.getStoreId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getStoreId());
    }
}

